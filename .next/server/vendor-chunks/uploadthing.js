"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/client/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/client/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generatePermittedFileTypes),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n\n\n\nvar version$1 = \"6.7.0\";\n\nconst maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch?.[1];\n    const message = messageMatch?.[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\n/**\n * Map S3 error codes to UploadThing error codes\n *\n * This is a subset of the S3 error codes, based on what seemed most likely to\n * occur in uploadthing. For a full list of S3 error codes, see:\n * https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n */ const DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nconst s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    EntityTooSmall: \"TOO_SMALL\",\n    EntityTooLarge: \"TOO_LARGE\",\n    ExpiredToken: \"FORBIDDEN\",\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n\n/**\n * Used by client uploads where progress is needed.\n * Uses XMLHttpRequest.\n */ async function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.contentDisposition)(opts.contentDisposition, opts.fileName));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                // Add a delay before retrying (exponential backoff can be used)\n                const delay = Math.pow(2, retryCount) * 1000;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1); // Retry the request\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                // Add a delay before retrying (exponential backoff can be used)\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1); // Retry the request\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L200\"\n */ const createUTReporter = (cfg)=>{\n    return async (type, payload)=>{\n        const url = createAPIRequestUrl({\n            url: cfg.url,\n            slug: cfg.endpoint,\n            actionType: type\n        });\n        let customHeaders = typeof cfg.headers === \"function\" ? cfg.headers() : cfg.headers;\n        if (customHeaders instanceof Promise) customHeaders = await customHeaders;\n        const response = await cfg.fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-uploadthing-package\": cfg.package,\n                \"x-uploadthing-version\": version$1,\n                ...customHeaders\n            }\n        });\n        switch(type){\n            case \"failure\":\n                {\n                    // why isn't this narrowed automatically?\n                    const p = payload;\n                    const parsed = maybeParseResponseXML(p.s3Error ?? \"\");\n                    if (parsed?.message) {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: parsed.code,\n                            message: parsed.message\n                        });\n                    } else {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: `Failed to upload file ${p.fileName} to S3`,\n                            cause: p.s3Error\n                        });\n                    }\n                }\n        }\n        if (!response.ok) {\n            const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.fromResponse(response);\n            throw error;\n        }\n        const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(response);\n        if (jsonOrError instanceof Error) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: jsonOrError.message,\n                cause: response\n            });\n        }\n        return jsonOrError;\n    };\n};\n\n// Don't want to ship our logger to the client, keep size down\nconst version = version$1;\nconst uploadFilesInternal = async (endpoint, opts)=>{\n    // Fine to use global fetch in browser\n    const fetch = globalThis.fetch.bind(globalThis);\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        url: opts.url,\n        package: opts.package,\n        fetch,\n        headers: opts.headers\n    });\n    // Get presigned URL for S3 upload\n    const s3ConnectionRes = await reportEventToUT(\"upload\", {\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f)=>({\n                name: f.name,\n                size: f.size,\n                type: f.type\n            }))\n    });\n    if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No URL. How did you even get here?\",\n            cause: s3ConnectionRes\n        });\n    }\n    const fileUploadPromises = s3ConnectionRes.map(async (presigned)=>{\n        const file = opts.files.find((f)=>f.name === presigned.fileName);\n        if (!file) {\n            console.error(\"No file found for presigned URL\", presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: \"No file found for presigned URL\",\n                cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n            });\n        }\n        opts.onUploadBegin?.({\n            file: file.name\n        });\n        if (\"urls\" in presigned) {\n            await uploadMultipart(file, presigned, {\n                reportEventToUT,\n                ...opts\n            });\n            // wait a bit as it's unsreasonable to expect the server to be done by now\n            await new Promise((r)=>setTimeout(r, 750));\n        } else {\n            await uploadPresignedPost(file, presigned, {\n                reportEventToUT,\n                ...opts\n            });\n        }\n        let serverData = null;\n        if (!opts.skipPolling) {\n            serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.withExponentialBackoff)(async ()=>{\n                const res = await fetch(presigned.pollingUrl, {\n                    headers: {\n                        authorization: presigned.pollingJwt\n                    }\n                }).then((r)=>r.json());\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return res.status === \"done\" ? res.callbackData : undefined;\n            });\n        }\n        return {\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            key: presigned.key,\n            url: \"https://utfs.io/f/\" + presigned.key,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            serverData: serverData,\n            customId: presigned.customId\n        };\n    });\n    return Promise.all(fileUploadPromises);\n};\nconst genUploader = (initOpts)=>{\n    return (endpoint, opts)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        uploadFilesInternal(endpoint, {\n            ...opts,\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(initOpts?.url),\n            package: initOpts.package\n        });\n};\nasync function uploadMultipart(file, presigned, opts) {\n    let etags;\n    let uploadedBytes = 0;\n    try {\n        etags = await Promise.all(presigned.urls.map(async (url, index)=>{\n            const offset = presigned.chunkSize * index;\n            const end = Math.min(offset + presigned.chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            const etag = await uploadPartWithProgress({\n                url,\n                chunk: chunk,\n                contentDisposition: presigned.contentDisposition,\n                fileType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                onProgress: (delta)=>{\n                    uploadedBytes += delta;\n                    const percent = uploadedBytes / file.size * 100;\n                    opts.onUploadProgress?.({\n                        file: file.name,\n                        progress: percent\n                    });\n                }\n            });\n            return {\n                tag: etag,\n                partNumber: index + 1\n            };\n        }));\n    } catch (error) {\n        await opts.reportEventToUT(\"failure\", {\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId,\n            fileName: file.name,\n            s3Error: error.toString()\n        });\n        throw \"unreachable\"; // failure event will throw for us\n    }\n    // Tell the server that the upload is complete\n    await opts.reportEventToUT(\"multipart-complete\", {\n        uploadId: presigned.uploadId,\n        fileKey: presigned.key,\n        etags\n    }).catch((res)=>{\n        console.log(\"Failed to alert UT of upload completion\");\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to alert UT of upload completion\",\n            cause: res\n        });\n    });\n}\nasync function uploadPresignedPost(file, presigned, opts) {\n    const formData = new FormData();\n    Object.entries(presigned.fields).forEach(([k, v])=>formData.append(k, v));\n    formData.append(\"file\", file); // File data **MUST GO LAST**\n    const response = await new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", presigned.url);\n        xhr.setRequestHeader(\"Accept\", \"application/xml\");\n        xhr.upload.onprogress = (p)=>{\n            opts.onUploadProgress?.({\n                file: file.name,\n                progress: p.loaded / p.total * 100\n            });\n        };\n        xhr.onload = ()=>resolve({\n                status: xhr.status\n            });\n        xhr.onerror = (e)=>reject(e);\n        xhr.send(formData);\n    }).catch(async (error)=>{\n        await opts.reportEventToUT(\"failure\", {\n            fileKey: presigned.key,\n            uploadId: null,\n            fileName: file.name,\n            s3Error: error.toString()\n        });\n        throw \"unreachable\"; // failure event will throw for us\n    });\n    if (response.status > 299 || response.status < 200) {\n        await opts.reportEventToUT(\"failure\", {\n            fileKey: presigned.key,\n            uploadId: null,\n            fileName: file.name\n        });\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/internal/types.js":
/*!****************************************************!*\
  !*** ./node_modules/uploadthing/internal/types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* binding */ UTFiles),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES)\n/* harmony export */ });\n/**\n * Marker used to append a `customId` to the incoming file data in `.middleware()`\n * @example\n * ```ts\n * .middleware((opts) => {\n *   return {\n *     [UTFiles]: opts.files.map((file) => ({\n *       ...file,\n *       customId: generateId(),\n *     }))\n *   };\n * })\n * ```\n */ const UTFiles = Symbol(\"uploadthing-custom-id-symbol\");\n/**\n * Valid options for the `?actionType` query param\n */ const VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9pbnRlcm5hbC90eXBlcy5qcz83MWVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFya2VyIHVzZWQgdG8gYXBwZW5kIGEgYGN1c3RvbUlkYCB0byB0aGUgaW5jb21pbmcgZmlsZSBkYXRhIGluIGAubWlkZGxld2FyZSgpYFxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiAubWlkZGxld2FyZSgob3B0cykgPT4ge1xuICogICByZXR1cm4ge1xuICogICAgIFtVVEZpbGVzXTogb3B0cy5maWxlcy5tYXAoKGZpbGUpID0+ICh7XG4gKiAgICAgICAuLi5maWxlLFxuICogICAgICAgY3VzdG9tSWQ6IGdlbmVyYXRlSWQoKSxcbiAqICAgICB9KSlcbiAqICAgfTtcbiAqIH0pXG4gKiBgYGBcbiAqLyBjb25zdCBVVEZpbGVzID0gU3ltYm9sKFwidXBsb2FkdGhpbmctY3VzdG9tLWlkLXN5bWJvbFwiKTtcbi8qKlxuICogVmFsaWQgb3B0aW9ucyBmb3IgdGhlIGA/YWN0aW9uVHlwZWAgcXVlcnkgcGFyYW1cbiAqLyBjb25zdCBWQUxJRF9BQ1RJT05fVFlQRVMgPSBbXG4gICAgXCJ1cGxvYWRcIixcbiAgICBcImZhaWx1cmVcIixcbiAgICBcIm11bHRpcGFydC1jb21wbGV0ZVwiXG5dO1xuXG5leHBvcnQgeyBVVEZpbGVzLCBWQUxJRF9BQ1RJT05fVFlQRVMgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/internal/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/next/index.js":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/next/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_1__.UTFiles),\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var uploadthing_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uploadthing/server */ \"(ssr)/./node_modules/uploadthing/server/index.js\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uploadthing/internal/types */ \"(ssr)/./node_modules/uploadthing/internal/types.js\");\n\n\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\n\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n\nconst createUploadthing = (opts)=>createBuilder(opts);\nconst createRouteHandler = (opts)=>{\n    const handlers = (0,uploadthing_server__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_DO_NOT_USE_createRouteHandlerCore)(opts, \"nextjs-app\");\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createNextRouteHandler = createRouteHandler;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvbmV4dC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0Y7QUFDM0I7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwyQkFBMkI7QUFDM0IsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsOEZBQTBDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7O0FBRXlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL25leHQvaW5kZXguanM/NDc3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUgfSBmcm9tICd1cGxvYWR0aGluZy9zZXJ2ZXInO1xuZXhwb3J0IHsgVVRGaWxlcyB9IGZyb20gJ3VwbG9hZHRoaW5nL2ludGVybmFsL3R5cGVzJztcblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yRm9ybWF0dGVyKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQ3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcbiAgICBjb25zdCBfZGVmID0ge1xuICAgICAgICAvLyBEZWZhdWx0IHJvdXRlciBjb25maWdcbiAgICAgICAgcm91dGVyQ29uZmlnOiB7XG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIG1heEZpbGVTaXplOiBcIjRNQlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0UGFyc2VyOiB7XG4gICAgICAgICAgICBwYXJzZTogKCk9PnVuZGVmaW5lZCxcbiAgICAgICAgICAgIF9pbnB1dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX291dHB1dDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZXdhcmU6ICgpPT4oe30pLFxuICAgICAgICBvblVwbG9hZEVycm9yOiAoKT0+KHt9KSxcbiAgICAgICAgZXJyb3JGb3JtYXR0ZXI6IGluaXREZWYuZXJyb3JGb3JtYXR0ZXIgPz8gZGVmYXVsdEVycm9yRm9ybWF0dGVyLFxuICAgICAgICAvLyBPdmVybG9hZCB3aXRoIHByb3BlcnRpZXMgcGFzc2VkIGluXG4gICAgICAgIC4uLmluaXREZWZcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0ICh1c2VyUGFyc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICAuLi5fZGVmLFxuICAgICAgICAgICAgICAgIGlucHV0UGFyc2VyOiB1c2VyUGFyc2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWlkZGxld2FyZSAodXNlck1pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZTogdXNlck1pZGRsZXdhcmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZENvbXBsZXRlICh1c2VyVXBsb2FkQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgX2RlZixcbiAgICAgICAgICAgICAgICByZXNvbHZlcjogdXNlclVwbG9hZENvbXBsZXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZEVycm9yICh1c2VyT25VcGxvYWRFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICAgICAgLi4uX2RlZixcbiAgICAgICAgICAgICAgICBvblVwbG9hZEVycm9yOiB1c2VyT25VcGxvYWRFcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihvcHRzKSB7XG4gICAgcmV0dXJuIChpbnB1dCk9PntcbiAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICByb3V0ZXJDb25maWc6IGlucHV0LFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5jb25zdCBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKT0+Y3JlYXRlQnVpbGRlcihvcHRzKTtcbmNvbnN0IGNyZWF0ZVJvdXRlSGFuZGxlciA9IChvcHRzKT0+e1xuICAgIGNvbnN0IGhhbmRsZXJzID0gSU5URVJOQUxfRE9fTk9UX1VTRV9jcmVhdGVSb3V0ZUhhbmRsZXJDb3JlKG9wdHMsIFwibmV4dGpzLWFwcFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBQT1NUOiAocmVxKT0+aGFuZGxlcnMuUE9TVChyZXEpLFxuICAgICAgICBHRVQ6IChyZXEpPT5oYW5kbGVycy5HRVQocmVxKVxuICAgIH07XG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGNyZWF0ZVJvdXRlSGFuZGxlcn0gaW5zdGVhZFxuICovIGNvbnN0IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIgPSBjcmVhdGVSb3V0ZUhhbmRsZXI7XG5cbmV4cG9ydCB7IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIsIGNyZWF0ZVJvdXRlSGFuZGxlciwgY3JlYXRlVXBsb2FkdGhpbmcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/next/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/server/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/server/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_DO_NOT_USE_createRouteHandlerCore: () => (/* binding */ INTERNAL_DO_NOT_USE_createRouteHandlerCore),\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   UTFile: () => (/* binding */ UTFile),\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles),\n/* harmony export */   UploadThingError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var std_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! std-env */ \"(ssr)/./node_modules/std-env/dist/index.mjs\");\n/* harmony import */ var consola_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! consola/core */ \"(ssr)/./node_modules/consola/dist/core.mjs\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uploadthing/internal/types */ \"(ssr)/./node_modules/uploadthing/internal/types.js\");\n/* harmony import */ var _uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/mime-types */ \"(ssr)/./node_modules/@uploadthing/mime-types/dist/index.js\");\n\n\n\n\n\n\n\n\nvar version = \"6.7.0\";\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    const errorFormatter = router[Object.keys(router)[0]]?._def.errorFormatter ?? defaultErrorFormatter;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return errorFormatter(error);\n}\n\nconst colorize = (str, level)=>{\n    // TODO: Maybe check is shell supports colors\n    switch(level){\n        case \"error\":\n        case \"fatal\":\n            return `\\x1b[41m\\x1b[30m${str}\\x1b[0m`;\n        case \"warn\":\n            return `\\x1b[43m\\x1b[30m${str}\\x1b[0m`;\n        case \"info\":\n        case \"log\":\n            return `\\x1b[44m\\x1b[30m${str}\\x1b[0m`;\n        case \"debug\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"trace\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"success\":\n            return `\\x1b[42m\\x1b[30m${str}\\x1b[0m`;\n        default:\n            return str;\n    }\n};\nconst icons = {\n    fatal: \"⨯\",\n    error: \"⨯\",\n    warn: \"⚠️\",\n    info: \"ℹ\",\n    log: \"ℹ\",\n    debug: \"⚙\",\n    trace: \"→\",\n    success: \"✓\"\n};\nfunction formatStack(stack) {\n    const cwd = \"cwd\" in std_env__WEBPACK_IMPORTED_MODULE_4__.process && typeof std_env__WEBPACK_IMPORTED_MODULE_4__.process.cwd === \"function\" ? std_env__WEBPACK_IMPORTED_MODULE_4__.process.cwd() : \"__UnknownCWD__\";\n    return \"  \" + stack.split(\"\\n\").splice(1).map((l)=>l.trim().replace(\"file://\", \"\").replace(cwd + \"/\", \"\")).join(\"\\n  \");\n}\nfunction formatArgs(args) {\n    const fmtArgs = args.map((arg)=>{\n        if ((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(arg) && typeof arg.stack === \"string\") {\n            return arg.message + \"\\n\" + formatStack(arg.stack);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return arg;\n    });\n    return fmtArgs.map((arg)=>{\n        if (typeof arg === \"string\") {\n            return arg;\n        }\n        return JSON.stringify(arg, null, 4);\n    });\n}\nconst logger = (0,consola_core__WEBPACK_IMPORTED_MODULE_1__.createConsola)({\n    reporters: [\n        {\n            log: (logObj)=>{\n                const { type, tag, date, args } = logObj;\n                const icon = icons[type];\n                const logPrefix = colorize(` ${icon} ${tag} ${date.toLocaleTimeString()} `, type);\n                const lines = formatArgs(args).join(\" \") // concat all arguments to one space-separated string (like console does)\n                .split(\"\\n\") // split all the newlines (e.g. from logged JSON.stringified objects)\n                .map((l)=>logPrefix + \" \" + l) // prepend the log prefix to each line\n                .join(\"\\n\"); // join all the lines back together\n                // eslint-disable-next-line no-console\n                console.log(lines);\n            }\n        }\n    ],\n    defaults: {\n        tag: \"UPLOADTHING\"\n    }\n});\nconst initLogger = (level)=>{\n    // logger.wrapConsole();\n    logger.level = consola_core__WEBPACK_IMPORTED_MODULE_1__.LogLevels[level ?? \"info\"];\n};\n\nconst isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nconst conditionalDevServer = async (opts)=>{\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.pollForFileData)({\n        url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),\n        apiKey: opts.apiKey,\n        sdkVersion: version,\n        fetch: opts.fetch\n    }, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        logger.info(\"SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const payload = JSON.stringify({\n            status: \"uploaded\",\n            metadata: JSON.parse(file.metadata ?? \"{}\"),\n            file: {\n                url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n                key: opts.fileKey,\n                name: file.fileName,\n                size: file.fileSize,\n                type: file.fileType,\n                customId: file.customId\n            }\n        });\n        const signature = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.signPayload)(payload, opts.apiKey);\n        try {\n            const response = await opts.fetch(callbackUrl, {\n                method: \"POST\",\n                body: payload,\n                headers: {\n                    \"uploadthing-hook\": \"callback\",\n                    \"x-uploadthing-signature\": signature\n                }\n            });\n            if (isValidResponse(response)) {\n                logger.success(\"Successfully simulated callback for file\", opts.fileKey);\n            } else {\n                throw new Error(\"Invalid response\");\n            }\n        } catch (e) {\n            logger.error(`Failed to simulate callback for file '${opts.fileKey}'. Is your webhook configured correctly?`);\n            logger.error(`  - Make sure the URL '${callbackUrl}' is accessible without any authentication. You can verify this by running 'curl -X POST ${callbackUrl}' in your terminal`);\n            logger.error(`  - Still facing issues? Read https://docs.uploadthing.com/faq for common issues`);\n        }\n        return file;\n    });\n    if (fileData !== undefined) return fileData;\n    logger.error(`Failed to simulate callback for file ${opts.fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n\n/**\n * Creates a wrapped fetch that will always forward a few headers to the server.\n */ const createUTFetch = (apiKey, fetch, fePackage, beAdapter)=>{\n    return async (endpoint, payload)=>{\n        const response = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(endpoint), {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-uploadthing-api-key\": apiKey,\n                \"x-uploadthing-version\": version,\n                \"x-uploadthing-fe-package\": fePackage,\n                \"x-uploadthing-be-adapter\": beAdapter\n            }\n        });\n        return response;\n    };\n};\nconst fileCountLimitHit = (files, routeConfig)=>{\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = routeConfig[key]?.maxFileCount;\n        if (!limit) {\n            logger.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nconst buildRequestHandler = (opts, adapter)=>{\n    return async (input)=>{\n        const isDev = opts.config?.isDev ?? std_env__WEBPACK_IMPORTED_MODULE_4__.isDevelopment;\n        const fetch = opts.config?.fetch ?? globalThis.fetch;\n        if (isDev) {\n            logger.info(\"UploadThing dev server is now running!\");\n        }\n        const { router, config } = opts;\n        const preferredOrEnvSecret = config?.uploadthingSecret ?? std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_SECRET;\n        const req = input.req;\n        const url = new URL(req.url);\n        // Get inputs from query and params\n        const params = url.searchParams;\n        const uploadthingHook = req.headers.get(\"uploadthing-hook\") ?? undefined;\n        const slug = params.get(\"slug\") ?? undefined;\n        const actionType = params.get(\"actionType\") ?? undefined;\n        const utFrontendPackage = req.headers.get(\"x-uploadthing-package\") ?? \"unknown\";\n        const clientVersion = req.headers.get(\"x-uploadthing-version\");\n        if (clientVersion != null && clientVersion !== version) {\n            logger.error(\"Client version mismatch\");\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Client version mismatch\",\n                cause: `Server version: ${version}, Client version: ${clientVersion}`\n            });\n        }\n        // Validate inputs\n        if (!slug) {\n            logger.error(\"No slug provided in params:\", params);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"No slug provided in params\"\n            });\n        }\n        if (slug && typeof slug !== \"string\") {\n            const msg = `Expected slug to be of type 'string', got '${typeof slug}'`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: msg\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            const msg = `Expected actionType to be of type 'string', got '${typeof actionType}'`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: msg\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            const msg = `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`;\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: msg\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            const msg = `No secret provided, please set UPLOADTHING_SECRET in your env file or in the config`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: `No secret provided`,\n                cause: msg\n            });\n        }\n        if (!preferredOrEnvSecret.startsWith(\"sk_\")) {\n            const msg = `Invalid secret provided, UPLOADTHING_SECRET must start with 'sk_'`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: \"Invalid API key. API keys must start with 'sk_'.\",\n                cause: msg\n            });\n        }\n        if (utFrontendPackage && typeof utFrontendPackage !== \"string\") {\n            const msg = `Expected x-uploadthing-package to be of type 'string', got '${typeof utFrontendPackage}'`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`x-uploadthing-package` must be a string. eg. '@uploadthing/react'\",\n                cause: msg\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            const msg = `No file route found for slug ${slug}`;\n            logger.error(msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: msg\n            });\n        }\n        const utFetch = createUTFetch(preferredOrEnvSecret, fetch, utFrontendPackage, adapter);\n        logger.debug(\"All request input is valid\", {\n            slug,\n            actionType,\n            uploadthingHook\n        });\n        if (uploadthingHook === \"callback\") {\n            // This is when we receive the webhook from uploadthing\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n            logger.debug(\"Handling callback request with input:\", maybeReqBody);\n            if (maybeReqBody instanceof Error) {\n                logger.error(\"Invalid request body\", maybeReqBody);\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            const verified = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.verifySignature)(JSON.stringify(maybeReqBody), req.headers.get(\"x-uploadthing-signature\"), preferredOrEnvSecret);\n            logger.debug(\"Signature verified:\", verified);\n            if (!verified) {\n                logger.error(\"Invalid signature\");\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid signature\"\n                });\n            }\n            const resolverArgs = {\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            };\n            logger.debug(\"Running 'onUploadComplete' callback with input:\", resolverArgs);\n            const res = await uploadable.resolver(resolverArgs);\n            const payload = {\n                fileKey: maybeReqBody.file.key,\n                callbackData: res ?? null\n            };\n            logger.debug(\"'onUploadComplete' callback finished. Sending response to UploadThing:\", payload);\n            const callbackResponse = await utFetch(\"/api/serverCallback\", payload);\n            logger.debug(\"UploadThing responded with status:\", callbackResponse.status);\n            return {\n                status: 200,\n                body: null\n            };\n        }\n        if (!actionType || !uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_ACTION_TYPES.includes(actionType)) {\n            // This would either be someone spamming or the AWS webhook\n            const msg = `Expected ${uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${actionType}\"`;\n            logger.error(\"Invalid action type.\", msg);\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: msg\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        logger.error(\"Invalid request body\", maybeInput);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    logger.debug(\"Handling upload request with input:\", maybeInput);\n                    const { files, input: userInput } = maybeInput;\n                    // Validate without Zod (for now)\n                    if (!Array.isArray(files) || !files.every((f)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(f) && typeof f.name === \"string\" && typeof f.size === \"number\" && typeof f.type === \"string\")) {\n                        const msg = `Expected files to be of type '{name:string, size:number, type:string}[]', got '${JSON.stringify(files)}'`;\n                        logger.error(msg);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Files must be an array of objects with name and size\",\n                            cause: msg\n                        });\n                    }\n                    // validate the input\n                    let parsedInput = {};\n                    try {\n                        logger.debug(\"Parsing input\");\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                        logger.debug(\"Input parsed successfully\", parsedInput);\n                    } catch (error) {\n                        logger.error(\"An error occurred trying to parse input:\", error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        logger.debug(\"Running middleware\");\n                        metadata = await uploadable._def.middleware({\n                            ...input.middlewareArgs,\n                            input: parsedInput,\n                            files\n                        });\n                        logger.debug(\"Middleware finished successfully with:\", metadata);\n                    } catch (error) {\n                        logger.error(\"An error occurred in your middleware function:\", error);\n                        if (error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError) return error;\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles] && metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length !== files.length) {\n                        const msg = `Expected files override to have the same length as original files, got ${metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length} but expected ${files.length}`;\n                        logger.error(msg);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Files override must have the same length as files\",\n                            cause: msg\n                        });\n                    }\n                    // Attach customIds from middleware to the files\n                    const filesWithCustomIds = files.map((file, idx)=>{\n                        const theirs = metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles]?.[idx];\n                        if (theirs && theirs.size !== file.size) {\n                            logger.warn(\"File size mismatch. Reverting to original size\");\n                        }\n                        return {\n                            name: theirs?.name ?? file.name,\n                            size: file.size,\n                            customId: theirs?.customId\n                        };\n                    });\n                    // FILL THE ROUTE CONFIG so the server only has one happy path\n                    let parsedConfig;\n                    try {\n                        logger.debug(\"Parsing route config\", uploadable._def.routerConfig);\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                        logger.debug(\"Route config parsed successfully\", parsedConfig);\n                    } catch (error) {\n                        logger.error(\"Invalid route config\", error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        logger.debug(\"Checking file count limit\", files);\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            const msg = `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`;\n                            logger.error(msg);\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: msg\n                            });\n                        }\n                        logger.debug(\"File count limit check passed\");\n                    } catch (error) {\n                        logger.error(\"Invalid route config\", error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const callbackUrl = resolveCallbackUrl({\n                        config,\n                        req,\n                        url,\n                        isDev\n                    });\n                    logger.debug(\"Retrieving presigned URLs from UploadThing. Callback URL is:\", callbackUrl.href);\n                    const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n                        files: filesWithCustomIds,\n                        routeConfig: parsedConfig,\n                        metadata,\n                        callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n                        callbackSlug: slug\n                    });\n                    // This is when we send the response back to the user's form so they can submit the files\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        logger.error(\"Unable to get presigned URLs\", parsedResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    logger.debug(\"UploadThing responded with:\", parsedResponse);\n                    logger.debug(\"Sending presigned URLs to client\");\n                    // This is when we send the response back to the user's form so they can submit the files\n                    let promise = undefined;\n                    if (isDev) {\n                        promise = Promise.all(parsedResponse.map((file)=>conditionalDevServer({\n                                fileKey: file.key,\n                                apiKey: preferredOrEnvSecret,\n                                fetch\n                            }).catch((error)=>{\n                                logger.error(\"Err\", error);\n                            })));\n                    }\n                    return {\n                        cleanup: promise,\n                        body: parsedResponse,\n                        status: 200\n                    };\n                }\n            case \"multipart-complete\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        logger.error(\"Invalid request body\", maybeReqBody);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    logger.debug(\"Handling multipart-complete request with input:\", maybeReqBody);\n                    logger.debug(\"Notifying UploadThing that multipart upload is complete\");\n                    const completeRes = await utFetch(\"/api/completeMultipart\", {\n                        fileKey: maybeReqBody.fileKey,\n                        uploadId: maybeReqBody.uploadId,\n                        etags: maybeReqBody.etags\n                    });\n                    if (!completeRes.ok) {\n                        logger.error(\"Failed to notify UploadThing that multipart upload is complete\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: \"Failed to complete multipart upload\",\n                            cause: completeRes\n                        });\n                    }\n                    logger.debug(\"UploadThing responded with:\", completeRes.status);\n                    return {\n                        status: 200,\n                        body: null\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        logger.error(\"Invalid request body\", maybeReqBody);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey, uploadId } = maybeReqBody;\n                    logger.debug(\"Handling failure request with input:\", maybeReqBody);\n                    logger.debug(\"Notifying UploadThing that upload failed\");\n                    // Tell uploadthing to mark the upload as failed\n                    const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n                        fileKey,\n                        uploadId\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(uploadthingApiResponse);\n                        logger.error(\"Failed to mark upload as failed\", parsedResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Unable to mark upload as failed\",\n                            cause: parsedResponse\n                        });\n                    }\n                    logger.debug(\"UploadThing responded with:\", uploadthingApiResponse);\n                    logger.debug(\"Running 'onUploadError' callback\");\n                    try {\n                        // Run the onUploadError callback\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        logger.error(\"Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\", error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200,\n                        body: null\n                    };\n                }\n            default:\n                {\n                    // This should never happen\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nfunction resolveCallbackUrl(opts) {\n    let callbackUrl = opts.url;\n    if (opts.config?.callbackUrl) {\n        callbackUrl = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(opts.config.callbackUrl);\n    } else if (std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_URL) {\n        callbackUrl = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_URL);\n    }\n    if (opts.isDev || !callbackUrl.host.includes(\"localhost\")) {\n        return callbackUrl;\n    }\n    // Production builds have to have a public URL so UT can send webhook\n    // Parse the URL from the headers\n    const headers = opts.req.headers;\n    let parsedFromHeaders = headers.get(\"origin\") ?? headers.get(\"referer\") ?? headers.get(\"host\") ?? headers.get(\"x-forwarded-host\");\n    if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n        parsedFromHeaders = (headers.get(\"x-forwarded-proto\") ?? \"https\") + \"://\" + parsedFromHeaders;\n    }\n    if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n        // Didn't find a valid URL in the headers, log a warning and use the original url anyway\n        logger.warn(\"You are using a localhost callback url in production which is not supported.\", \"Read more and learn how to fix it here: https://docs.uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\");\n        return callbackUrl;\n    }\n    return (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.resolveMaybeUrlArg)(parsedFromHeaders);\n}\nconst buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n\nfunction incompatibleNodeGuard() {\n    if (typeof std_env__WEBPACK_IMPORTED_MODULE_4__.process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = std_env__WEBPACK_IMPORTED_MODULE_4__.process.versions?.node?.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = std_env__WEBPACK_IMPORTED_MODULE_4__.process.env?.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)?.[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    // Require ^18.13.0\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    logger.fatal(`YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    // Kill the process if it isn't going to work correctly anyway\n    // If we've gotten this far we know we have a Node.js runtime so exit is defined. Override std-env type.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    std_env__WEBPACK_IMPORTED_MODULE_4__.process.exit?.(1);\n}\n\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n\nconst maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch?.[1];\n    const message = messageMatch?.[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\n/**\n * Map S3 error codes to UploadThing error codes\n *\n * This is a subset of the S3 error codes, based on what seemed most likely to\n * occur in uploadthing. For a full list of S3 error codes, see:\n * https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html\n */ const DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nconst s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    EntityTooSmall: \"TOO_SMALL\",\n    EntityTooLarge: \"TOO_LARGE\",\n    ExpiredToken: \"FORBIDDEN\",\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n\n/**\n * Used by server uploads where progress is not needed.\n * Uses normal fetch API.\n */ async function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.contentDisposition)(opts.contentDisposition, opts.fileName)\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        // Retry after exponential backoff\n        const delay = 2 ** retryCount * 1000;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    // Max retries exceeded, tell UT server that upload failed\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed?.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\n\nfunction guardServerOnly() {\n    if (typeof window !== \"undefined\") {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"The `utapi` can only be used on the server.\"\n        });\n    }\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_SECRET) return std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nconst uploadFilesInternal = async (data, opts)=>{\n    // Request presigned URLs for each file\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size,\n            ...\"customId\" in file ? {\n                customId: file.customId\n            } : {}\n        }));\n    logger.debug(\"Getting presigned URLs for files\", fileData);\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition,\n            acl: data.acl\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.fromResponse(res);\n        logger.debug(\"Failed getting presigned URLs:\", error);\n        throw error;\n    }\n    const json = await res.json();\n    logger.debug(\"Got presigned URLs:\", json.data);\n    logger.debug(\"Starting uploads...\");\n    // Upload each file to S3 in chunks using multi-part uploads\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const presigned = json.data[i];\n        if (!presigned) {\n            logger.error(\"Failed to generate presigned URL for file:\", file, presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(presigned)\n            });\n        }\n        if (\"urls\" in presigned) {\n            await uploadMultipart(file, presigned, {\n                ...opts\n            });\n        } else {\n            await uploadPresignedPost(file, presigned, {\n                ...opts\n            });\n        }\n        // Poll for file to be available\n        logger.debug(\"Polling for file data...\");\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.pollForFileData)({\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${presigned.key}`),\n            apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n            sdkVersion: version,\n            fetch: opts.fetch\n        });\n        logger.debug(\"Polling complete.\");\n        return {\n            key: presigned.key,\n            url: presigned.fileUrl,\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            customId: \"customId\" in file ? file.customId ?? null : null\n        };\n    }));\n    logger.debug(\"All uploads complete, aggregating results...\");\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data = upload.value;\n            return {\n                data,\n                error: null\n            };\n        }\n        // We only throw UploadThingErrors, so this is safe\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\nasync function uploadMultipart(file, presigned, opts) {\n    logger.debug(\"Uploading file\", file.name, \"with\", presigned.urls.length, \"chunks of size\", presigned.chunkSize, \"bytes each\");\n    const etags = await Promise.all(presigned.urls.map(async (url, index)=>{\n        const offset = presigned.chunkSize * index;\n        const end = Math.min(offset + presigned.chunkSize, file.size);\n        const chunk = file.slice(offset, end);\n        const etag = await uploadPart({\n            fetch: opts.fetch,\n            url,\n            chunk: chunk,\n            contentDisposition: presigned.contentDisposition,\n            contentType: file.type,\n            fileName: file.name,\n            maxRetries: 10,\n            key: presigned.key,\n            utRequestHeaders: opts.utRequestHeaders\n        });\n        logger.debug(\"Part\", index + 1, \"uploaded successfully:\", etag);\n        return {\n            tag: etag,\n            partNumber: index + 1\n        };\n    }));\n    logger.debug(\"File\", file.name, \"uploaded successfully. Notifying UploadThing to complete multipart upload.\");\n    // Complete multipart upload\n    const completionRes = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId,\n            etags\n        }),\n        headers: opts.utRequestHeaders\n    });\n    logger.debug(\"UploadThing responsed with status:\", completionRes.status);\n}\nasync function uploadPresignedPost(file, presigned, opts) {\n    logger.debug(\"Uploading file\", file.name, \"using presigned POST URL\");\n    const formData = new FormData();\n    Object.entries(presigned.fields).forEach(([k, v])=>formData.append(k, v));\n    formData.append(\"file\", file); // File data **MUST GO LAST**\n    const res = await opts.fetch(presigned.url, {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n            Accept: \"application/xml\"\n        })\n    });\n    if (!res.ok) {\n        const text = await res.text();\n        logger.error(\"Failed to upload file:\", text);\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: \"Failed to upload file\",\n            cause: text\n        });\n    }\n    logger.debug(\"File\", file.name, \"uploaded successfully\");\n}\nfunction parseTimeToSeconds(time) {\n    const match = time.toString().split(/(\\d+)/).filter(Boolean);\n    const num = Number(match[0]);\n    const unit = (match[1] ?? \"s\").trim().slice(0, 1);\n    const multiplier = {\n        s: 1,\n        m: 60,\n        h: 3600,\n        d: 86400\n    }[unit];\n    return num * multiplier;\n}\n\n/**\n * Extension of the Blob class that simplifies setting the `name` and `customId` properties,\n * similar to the built-in File class from Node > 20.\n */ class UTFile extends Blob {\n    constructor(parts, name, options){\n        const optionsWithDefaults = {\n            ...options,\n            type: options?.type ?? ((0,_uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_3__.lookup)(name) || undefined),\n            lastModified: options?.lastModified ?? Date.now()\n        };\n        super(parts, optionsWithDefaults);\n        this.name = name;\n        this.customId = optionsWithDefaults.customId;\n        this.lastModified = optionsWithDefaults.lastModified;\n    }\n}\nclass UTApi {\n    constructor(opts){\n        /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   *\n   * @example\n   * await deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" })\n   */ this.deleteFiles = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            return this.requestUploadThing(\"/api/deleteFile\", keyType === \"fileKey\" ? {\n                fileKeys: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            } : {\n                customIds: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            }, \"An unknown error occurred while deleting files.\");\n        };\n        /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ this.getFileUrls = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            const json = await this.requestUploadThing(\"/api/getFileUrl\", keyType === \"fileKey\" ? {\n                fileKeys: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            } : {\n                customIds: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            }, \"An unknown error occurred while retrieving file URLs.\");\n            return json.data;\n        };\n        /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ this.listFiles = async (opts)=>{\n            guardServerOnly();\n            const json = await this.requestUploadThing(\"/api/listFiles\", {\n                ...opts\n            }, \"An unknown error occurred while listing files.\");\n            return json.files;\n        };\n        this.renameFiles = async (updates)=>{\n            guardServerOnly();\n            return this.requestUploadThing(\"/api/renameFiles\", {\n                updates: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(updates)\n            }, \"An unknown error occurred while renaming files.\");\n        };\n        /** @deprecated Use {@link renameFiles} instead. */ this.renameFile = this.renameFiles;\n        this.getUsageInfo = async ()=>{\n            guardServerOnly();\n            return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occurred while getting usage info.\");\n        };\n        /** Request a presigned url for a private file(s) */ this.getSignedURL = async (key, opts)=>{\n            guardServerOnly();\n            const expiresIn = opts?.expiresIn ? parseTimeToSeconds(opts.expiresIn) : undefined;\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            if (opts?.expiresIn && isNaN(expiresIn)) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\"\n                });\n            }\n            if (expiresIn && expiresIn > 86400 * 7) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be less than 7 days (604800 seconds).\"\n                });\n            }\n            const json = await this.requestUploadThing(\"/api/requestFileAccess\", keyType === \"fileKey\" ? {\n                fileKey: key,\n                expiresIn\n            } : {\n                customId: key,\n                expiresIn\n            }, \"An unknown error occurred while retrieving presigned URLs.\");\n            return json.url;\n        };\n        this.fetch = opts?.fetch ?? globalThis.fetch;\n        this.apiKey = opts?.apiKey ?? std_env__WEBPACK_IMPORTED_MODULE_4__.process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": version,\n            \"x-uploadthing-be-adapter\": \"server-sdk\"\n        };\n        this.defaultKeyType = opts?.defaultKeyType ?? \"fileKey\";\n        initLogger(opts?.logLevel);\n        // Assert some stuff\n        guardServerOnly();\n        getApiKeyOrThrow(this.apiKey);\n        if (!this.apiKey?.startsWith(\"sk_\")) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: \"Invalid API key. API keys must start with `sk_`.\"\n            });\n        }\n        incompatibleNodeGuard();\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        const url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(pathname);\n        logger.debug(\"Requesting UploadThing:\", {\n            url,\n            body,\n            headers: this.defaultHeaders\n        });\n        const res = await this.fetch(url, {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        logger.debug(\"UploadThing responsed with status:\", res.status);\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            logger.error(\"Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        logger.debug(\"UploadThing response:\", json);\n        return json;\n    }\n    async uploadFiles(files, opts) {\n        guardServerOnly();\n        const uploads = await uploadFilesInternal({\n            files: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(files),\n            metadata: opts?.metadata ?? {},\n            contentDisposition: opts?.contentDisposition ?? \"inline\",\n            acl: opts?.acl\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        logger.debug(\"Finished uploading:\", uploadFileResponse);\n        return uploadFileResponse;\n    }\n    async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify(opts?.metadata ?? {}));\n        const downloadErrors = {};\n        const files = await Promise.all((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls).map(async (_url, index)=>{\n            let url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url.url : _url;\n            if (typeof url === \"string\") {\n                // since dataurls will result in name being too long, tell the user\n                // to use uploadFiles instead.\n                if (url.startsWith(\"data:\")) {\n                    downloadErrors[index] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Please use uploadFiles() for data URLs. uploadFilesFromUrl() is intended for use with remote URLs only.\"\n                    }));\n                    return undefined;\n                }\n                url = new URL(url);\n            }\n            const { name = url.pathname.split(\"/\").pop() ?? \"unknown-filename\", customId = undefined } = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url : {};\n            // Download the file on the user's server to avoid egress charges\n            logger.debug(\"Downloading file:\", url);\n            const fileResponse = await this.fetch(url);\n            if (!fileResponse.ok) {\n                downloadErrors[index] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                }));\n                return undefined;\n            }\n            logger.debug(\"Finished downloading file. Reading blob...\");\n            const blob = await fileResponse.blob();\n            logger.debug(\"Finished reading blob.\");\n            return new UTFile([\n                blob\n            ], name, {\n                customId\n            });\n        })).then((files)=>files.filter((x)=>x !== undefined));\n        logger.debug(\"Uploading files:\", files);\n        const uploads = await uploadFilesInternal({\n            files,\n            metadata: opts?.metadata ?? {},\n            contentDisposition: opts?.contentDisposition ?? \"inline\",\n            acl: opts?.acl\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        /** Put it all back together, preserve the order of files */ const responses = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls).map((_, index)=>{\n            if (downloadErrors[index]) {\n                return {\n                    data: null,\n                    error: downloadErrors[index]\n                };\n            }\n            return uploads.shift();\n        });\n        /** Return single object or array based on input urls */ const uploadFileResponse = Array.isArray(urls) ? responses : responses[0];\n        logger.debug(\"Finished uploading:\", uploadFileResponse);\n        return uploadFileResponse;\n    }\n}\n\nconst createUploadthing = (opts)=>createBuilder(opts);\n/** @internal */ const INTERNAL_DO_NOT_USE_createRouteHandlerCore = (opts, adapter)=>{\n    initLogger(opts.config?.logLevel);\n    incompatibleNodeGuard();\n    const requestHandler = buildRequestHandler(opts, adapter);\n    const getBuildPerms = buildPermissionsInfoHandler(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req,\n            middlewareArgs: {\n                req,\n                res: undefined,\n                event: undefined\n            }\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError) {\n            return new Response(JSON.stringify(formatError(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": version\n                }\n            });\n        }\n        if (response.status !== 200) {\n            // We messed up - this should never happen\n            return new Response(\"An unknown error occurred\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": version\n                }\n            });\n        }\n        const res = new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n        // @ts-expect-error - this is a custom property\n        res.cleanup = response.cleanup;\n        return res;\n    };\n    const GET = (request)=>{\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nconst createRouteHandler = (opts)=>INTERNAL_DO_NOT_USE_createRouteHandlerCore(opts, \"server\");\nconst extractRouterConfig = (router)=>buildPermissionsInfoHandler({\n        router\n    })();\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createServerHandler = createRouteHandler;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/server/index.js\n");

/***/ })

};
;